"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var link_1 = require("./link");
var apollo_fetch_1 = require("apollo-fetch");
var Observable = require("zen-observable");
var printer_1 = require("graphql/language/printer");
var HttpLink = (function (_super) {
    __extends(HttpLink, _super);
    function HttpLink(fetchParams) {
        var _this = _super.call(this) || this;
        _this.headers = {};
        _this._fetch = fetchParams && fetchParams.fetch || apollo_fetch_1.createApolloFetch({ uri: fetchParams && fetchParams.uri });
        _this._fetch.use(function (request, next) {
            request.options.headers = __assign({}, request.options.headers, _this.headers);
            next();
        });
        return _this;
    }
    HttpLink.prototype.request = function (operation) {
        var _this = this;
        this.headers = operation.context && operation.context.headers || {};
        var request = __assign({}, operation, { query: printer_1.print(operation.query) });
        return new Observable(function (observer) {
            _this._fetch(request)
                .then(function (data) {
                if (!observer.closed) {
                    observer.next(data);
                    observer.complete();
                }
            })
                .catch(function (error) {
                if (!observer.closed) {
                    observer.error(error);
                }
            });
        });
    };
    return HttpLink;
}(link_1.ApolloLink));
exports.default = HttpLink;
//# sourceMappingURL=httpLink.js.map